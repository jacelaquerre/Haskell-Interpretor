{-# LANGUAGE
    ConstraintKinds
   ,DataKinds
   ,ExplicitNamespaces
   ,FlexibleContexts
   ,FlexibleInstances
   ,FunctionalDependencies
   ,GADTs
   ,GeneralizedNewtypeDeriving
   ,InstanceSigs
   ,KindSignatures
   ,LambdaCase
   ,MonadComprehensions
   ,MultiParamTypeClasses
   ,NoImplicitPrelude
   ,OverloadedStrings
   ,PartialTypeSignatures
   ,PatternSynonyms
   ,PolyKinds
   ,QuantifiedConstraints
   ,RankNTypes
   ,RebindableSyntax
   ,ScopedTypeVariables
   ,StandaloneDeriving
   ,Strict
   ,StrictData
   ,TemplateHaskell
   ,TypeApplications
   ,TypeFamilies
   ,TypeOperators
   ,UndecidableInstances
   ,UndecidableSuperClasses
   ,UnicodeSyntax
   ,ViewPatterns
   ,DeriveLift #-}

module Lang.L1.Util where

import UVMHS

import Util.Lex

import Lang.L1.Data

import qualified Prelude as HS
import qualified Language.Haskell.TH.Syntax as QQ
import qualified Language.Haskell.TH.Quote as QQ

import Data.Map (Map)
import qualified Data.Map as Map

import Data.Set (Set)
import qualified Data.Set as Set

makePrettySum ''Expr
makePrettySum ''Type
makePrettySum ''Value
makePrettySum ''Answer

instance (QQ.Lift a) ‚áí QQ.Lift (Set a) where
  lift xs =
    let xs' = Set.toList xs
    in [| Set.fromList xs' |]

instance (QQ.Lift k,QQ.Lift v) ‚áí QQ.Lift (Map k v) where
  lift kvs =
    let kvs' = Map.toList kvs
    in [| Map.fromList kvs' |]

deriving instance QQ.Lift Expr
deriving instance QQ.Lift Type
deriving instance QQ.Lift Value
deriving instance QQ.Lift Answer

level_LET        = 1
level_ASSIGN     = 2
level_TUPLE      = 5
level_ARROW      = 10
level_PLUS       = 11
level_TIMES      = 12
level_APP        = 21
level_UNBOX      = 22
level_ACCESS     = 23


pExpr ‚à∑ CParser TokenBasic Expr
pExpr = cpNewContext "expression" $ mixfix $ concat
  -- [ mixTerminal $ do cpSyntax "(" ; e ‚Üê pExpr ; cpSyntax ")" ; return e
  [ mixTerminal $ do i ‚Üê cpInteger ; return $ IntE i
  , mixInfixL (ùïü64 level_PLUS) $ do cpSyntax "+" ; return PlusE
  , mixInfixL (ùïü64 level_PLUS) $ do cpSyntax "*" ; return TimesE
  , mixTerminal $ do b ‚Üê pBool ; return $ BoolE b
  , mixPrefix (ùïü64 level_LET) $ do
      cpSyntax "if"
      e‚ÇÅ ‚Üê pExpr
      cpSyntax "then"
      e‚ÇÇ ‚Üê pExpr
      cpSyntax "else"
      return $ IfE e‚ÇÅ e‚ÇÇ
  , mixPrefix (ùïü64 level_LET) $ do
      cpSyntax "let"
      x ‚Üê pVar
      cpSyntax "="
      e ‚Üê pExpr
      cpSyntax "in"
      return $ LetE x e
  , mixPrefix (ùïü64 level_LET) $ do
      cpSyntax "mut"
      e ‚Üê pExpr
      cpSyntax "in"
      return $ LetE (chars "_") e
  , mixTerminal $ do
      cpSyntax "("
      e ‚Üê pExpr
      e' ‚Üê tries
        [ do cpSyntax ","
             es ‚Üê cpOneOrMoreSepBy (cpSyntax ",") pExpr
             return $ foldOnFrom es e $ \ e·µ¢ e‚Çê ‚Üí PairE e‚Çê e·µ¢
        , do return e
        ]
      cpSyntax ")"
      return e'
  , mixPrefix (ùïü64 level_APP) $ do cpSyntax "fst" ; return FstE
  , mixPrefix (ùïü64 level_APP) $ do cpSyntax "snd" ; return SndE
  , mixPrefix (ùïü64 level_APP) $ do
      cpSyntax "left"
      œÑO ‚Üê tohs ^$ cpOptional pType
      return $ LeftE œÑO
  , mixPrefix (ùïü64 level_APP) $ do
      cpSyntax "right"
      œÑO ‚Üê tohs ^$ cpOptional pType
      return $ RightE œÑO
  , mixTerminal $ do
      cpSyntax "case"
      e‚ÇÅ ‚Üê pExpr
      cpSyntax "{"
      cpSyntax "left"
      x‚ÇÅ ‚Üê pVar
      cpSyntax "=>"
      e‚ÇÇ ‚Üê pExpr
      cpSyntax "}"
      cpSyntax "{"
      cpSyntax "left"
      x‚ÇÇ ‚Üê pVar
      cpSyntax "=>"
      e‚ÇÉ ‚Üê pExpr
      cpSyntax "}"
      return $ CaseE e‚ÇÅ x‚ÇÅ e‚ÇÇ x‚ÇÇ e‚ÇÉ
  ]

pType ‚à∑ CParser TokenBasic Type
pType = cpNewContext "type" $ mixfix $ concat
  [ mixTerminal $ do cpSyntax "(" ; œÑ ‚Üê pType ; cpSyntax ")" ; return œÑ
  , mixTerminal $ do cpSyntax "int" ; return IntT
  , mixTerminal $ do cpSyntax "bool" ; return IntT
  , mixInfixL (ùïü64 level_TIMES) $ do cpSyntax "*" ; return PairT
  , mixInfixL (ùïü64 level_PLUS) $ do cpSyntax "+" ; return TUnionT
  ]

pLoc ‚à∑ CParser TokenBasic ‚Ñ§
pLoc = do cpSyntax "loc" ; cpInteger

pValue ‚à∑ CParser TokenBasic Value
pValue = cpNewContext "value" $ mixfix $ concat
  [ mixTerminal $ do i ‚Üê cpInteger ; return $ IntV i
  , mixTerminal $ do b ‚Üê pBool ; return $ BoolV b
  , mixTerminal $ do
      cpSyntax "("
      v ‚Üê pValue
      v' ‚Üê tries
        [ do cpSyntax ","
             vs ‚Üê cpOneOrMoreSepBy (cpSyntax ",") pValue
             return $ foldOnFrom vs v $ \ v·µ¢ v‚Çê ‚Üí PairV v‚Çê v·µ¢
        , do return v
        ]
      cpSyntax ")"
      return v'
  , mixPrefix (ùïü64 level_APP) $ do cpSyntax "left" ; return LeftV
  , mixPrefix (ùïü64 level_APP) $ do cpSyntax "right" ; return RightV
  ]

pAnswer ‚à∑ CParser TokenBasic Answer
pAnswer = cpNewContext "answer" $ concat
  [ do v ‚Üê pValue ; return $ ValueA v
  , do cpSyntax "bad" ; return BadA
  ]

pEnv ‚à∑ CParser TokenBasic Env
pEnv = pMap pVar pValue

parseExpr ‚à∑ ùïä ‚Üí IO Expr
parseExpr = parseIO pExpr *‚àò tokenizeIO lexer ‚àò tokens

quoteExpr ‚à∑ HS.String ‚Üí QQ.Q QQ.Exp
quoteExpr cs = do
  e ‚Üê QQ.runIO $ parseExpr $ string cs
  [| e |]

lme ‚à∑ QQ.QuasiQuoter
lme = QQ.QuasiQuoter (\ cs ‚Üí do e ‚Üê QQ.runIO $ lexAndParseIO pExpr $ string cs ; [| e |])
                     (const $ HS.fail $ chars "quote pattern - I can't even")
                     (const $ HS.fail $ chars "quote type - I can't even")
                     (const $ HS.fail $ chars "quote dec - I can't even")

lmt ‚à∑ QQ.QuasiQuoter
lmt = QQ.QuasiQuoter (\ cs ‚Üí do œÑ ‚Üê QQ.runIO $ lexAndParseIO pType $ string cs ; [| œÑ |])
                     (const $ HS.fail $ chars "quote pattern - I can't even")
                     (const $ HS.fail $ chars "quote type - I can't even")
                     (const $ HS.fail $ chars "quote dec - I can't even")

lmv ‚à∑ QQ.QuasiQuoter
lmv = QQ.QuasiQuoter (\ cs ‚Üí do v ‚Üê QQ.runIO $ lexAndParseIO pValue $ string cs ; [| v |])
                     (const $ HS.fail $ chars "quote pattern - I can't even")
                     (const $ HS.fail $ chars "quote type - I can't even")
                     (const $ HS.fail $ chars "quote dec - I can't even")

lma ‚à∑ QQ.QuasiQuoter
lma = QQ.QuasiQuoter (\ cs ‚Üí do a ‚Üê QQ.runIO $ lexAndParseIO pAnswer $ string cs ; [| a |])
                     (const $ HS.fail $ chars "quote pattern - I can't even")
                     (const $ HS.fail $ chars "quote type - I can't even")
                     (const $ HS.fail $ chars "quote dec - I can't even")

lmg ‚à∑ QQ.QuasiQuoter
lmg = QQ.QuasiQuoter (\ cs ‚Üí do Œ≥ ‚Üê QQ.runIO $ lexAndParseIO pEnv $ string cs ; [| Œ≥ |])
                     (const $ HS.fail $ chars "quote pattern - I can't even")
                     (const $ HS.fail $ chars "quote type - I can't even")
                     (const $ HS.fail $ chars "quote dec - I can't even")
